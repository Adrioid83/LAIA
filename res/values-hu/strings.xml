<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Laia</string>
    <string name="app_title">Learn Android in Android</string>
    
    <string name="what">1. Mi az az Android?</string>
    <string name="howto">2. Hogyan fejlesszünk Androidra?</string>
    <string name="activities">3. Hogyan használjunk Tevékenységeket?</string>
    <string name="manifest">4. Mit csinálnak a jegyzékek?</string>
    <string name="layouts">5. Hogyan csináljunk felhasználó felületet?</string>
    <string name="values">6. Hogyan csináljunk univerzális app-ot?</string>
    <string name="menu">7. Hogyan csináljunk funkcionális menüt?</string>
    <string name="debug">8. Hogyan hibamentesíthetjük alkalmazásunkat?</string>
    
    <string name="about">Névjegy</string>
    <string name="about_title">A LAIA-ról</string>
    <string name="about_text">A LAIA, avagy Learn Android in your Android (Tanulj Androidot az Androidon) egy referencia alkalmazás, amivel az Androidos fejlesztés alapjait sajátíthatod el. Ha szeretnél hozzájárulni bármivel az alkalmazáshoz, kattints az alábbi linkek valamelyikére.</string>
    
    <string name="button_xda">LAIA az XDA-n</string>
    <string name="button_github">OpenSource a GitHub-on</string>
    <string name="button_paypal">Támogass PayPal-lal</string>
    <string name="about_donations">A PayPal-os támogatás nem jár semmilyen elõnnyel, csupán a fejlesztés elõsegítését szolgálja. Ez az alkalmazás ingyenes, és az is marad.</string>
    
    <string name="hello_world">Helló világ!</string>
    
    <string name="title_activity_what">LAIA</string>
    <string name="intro_what">Az Android egy nyílt forráskódú operációs rendszer a Google-tól, mobiltelefonokra, tabletekre, és médialejátszókra tervezve. Az Android eredetileg az Android Inc. által lett fejlesztve, majd a Google felvásárolta 2005-ben. A Google az Apache License szárnyai alatt adja ki az Android kódját az AOSP Projekt-ben (Android Open Source Project). Az Androidnak egy nagylétszámú közössége fejleszt alkalmazásokat, ROM-okat, elsõsorban Java programnyelven, illetve C és C++-szal. Ebben az útmutatóban megtanulhatod a Java-val való fejlesztés alapjait. A C és C++-szal való fejlesztés jóval több idõt és energiát emészt fel, ugyanis ez a két programnyelv segíti elõ a kernelek és saját ROM-ok fejlesztését készülékeinkre. Jelenlegi kereteink között a Java-val való egyszerû fejlesztésekre koncentrálunk, remélhetõleg a késõbbiekben lesz lehetõségünk a másik két programnyelvre is rávilágitani.</string>
    <string name="subtitle_what">Az Android jellemzõi</string>
    <string name="a_what">Az UI (User interface, azaz felhasználó felület) az Androidban a közvetlen irányíthatóságra összpontosít, akár érintéssel, akár egérrel. Csúsztathatsz, érinthetsz, görgethetsz, hogy irányítsd a képernyõn található dolgokat. Ezeket a dolgokat te programozod le, és a funkciójukat is beállíthatod a Tevékenységek alatt. Ezekkel a részekkel fogunk most foglalkozni. Az eszközök további kihasználható részei a vibrálás, a gyorsulásmérõ, a giroszkóp, valamint sok egyéb szenzor..</string>
    <string name="b_what">Az Android eszközök a kezdõképernyõre érkeznek a rendszer elindulása után, melyet egy indító (launcher) szolgáltat. Ezek az indítók alkalmazásikonokból, valamint widgetekbõl állnak, melyek egy bizonyos alkalmazás részei. A harmadik féltõl származó alkalmazások (mint a tiéd) elérhetõek lesznek a Google Play Áruházban.</string>
    <string name="c_what">A képernyõ tetején található az állapotsáv, mely információt szolgáltat az eszközrõl valamint annak csatlakozásáról (internet, mobilszolgáltató). Ezt egy ujjhúzással tudjuk kiterjeszteni, aholis a különbözõ alkalmazások jeleznek fontos információt illetve frissítéseket (pl.: új e-mail). Ezek az értesítések addig aktívak maradnak, amíg nem olvassuk, vagy távolítjuk el õket.</string>
    <string name="d_what">Az Android különbözõ fajtái</string>
    <string name="e_what">Mivel az Android egy nyílt forráskódú projekt, a szolgáltatók módosítják az általuk árusított eszközökre az AOSP alapját. Ezek a frissítések jóval késõbb érkeznek a meg a bejelentéshez képest, vagy sokszor egyáltalán nem. Ezt hívjuk fragmentációnak. A Fragmentáció háborújában található a CyanogenMod. Ez egy úgymond "utángyártott" változata az Androidnak, mindig a legfrissebb forráskódra épülve. Ez teszi lehetõvé, hogy sok hivatalosan nem támogatott készülék is megkapja a legújabb verzió számú Android-ot, amelyet az esetek nagy részében nem kaphatna.</string>
    
    <string name="title_activity_howto">LAIA</string>
    <string name="intro_howto">Az Androidra való fejlesztés a Google által módosított Java könyvtáron alapszik, két fõ fejlesztõi környezet a Netbeans vagy az Eclipse. A Google az utóbbi években inkább az Eclipse-szel való fejlesztésre koncentrált, egy speciális fejlesztõi eszközt építve. Csak keress rá a Google-n az ADT Plugin után, és töltsd le a fejlesztõi környezetet (SDK) a számítógépedre. Ezek mellett ajánlatos a 2.3-as és 4.X. verziójú Androidok alapjait is feltelepíteni. Valamint, ha szeretnéd még jobban javítani alkalmazásod minõségét, kipróbálhatod az AIDE-t.</string>
    <string name="subtitle_howto">Eclipse felület és munkaterület</string>
    <string name="a_howto">Úgy sejtjük már feltelepítetted az Eclipse Juno-t, mert elsõsorban erre lesz szükségünk, karöltve az ADT Plugin-nal, és az Android SDK legfrissebb verziójával. Az Eclipse-n belül a File > New > Project alatt kezdhetsz neki. Ebben a fejezetben egy teszt projektre fogunk koncentrálni.</string>
    <string name="b_howto">A "New Android Application" ablak alatt állíthatjuk be a nevet, és az alkalmazásunk további információit. Azt javaslom, hogy 2.2-tõl 4.X-ig támogatott alkalmazást válassz ki (bár ez függ a feltelepített SDK-tól is). Most egy Holo kinézetre koncentrálunk, ami a 4.X. alapú készülékek szerves része.</string>
    <string name="c_howto">Amint végeztünk ezzel az ablakkal, az új projektünk létrejön, és már láthatjuk is a felületét (Layout)! Az Androidban két alapvetõ fejlesztõi nézettel találkozunk, a grafikaival (felületet alkalmazva, mint az az 5. fejezetben látható lesz), valamint kódolással (tevékenységek használatával, bõvebben 3. fejezet). De ha igazán jó alkalmazást szeretnénk, érdemes mindkettõt aktívan használni.</string>
    <string name="d_howto">Nézzük, mit ad egy üres alkalmazás!</string>
    <string name="e_howto">Nos, létrehoztuk elsõ alkalmazásunkat, amihez a Google is nagy segítséget nyújtott. Elõször megkapjuk az alapvetõ kódokat, amikhez szükség van az app futtatásához. Így már van egy futtatható programunk, ami egyenlõre csak a Helló Világ mondatot mutatja.</string>
    <string name="f_howto">Ahogy a képen láthatjuk, az alkalmazásunk alapstruktúrája megvan. Most nézzük ennek a részeit. A .java fájl tartalmazza a tevékenységeket, ez fogja elindítani az alkalmazásunkat, és minden nagyobb változtatást itt fogunk végrehajtani (3. fejezet). A "gen" mappa tartalmához ne nyúlj hozzá! A "res" mappában találhatóak a felület fájlok (5. fejezet), a menü fájlok (7. fejezet), és a húr (strings) fájlok (6. fejezet). A "res" mappán belül található még egy "drawables" nevezetû mappa, ahol az összes app-ban használatos képet fogunk elhelyezni. Végül, az AndroidManifest.xml, ami minden, az Android számára fontos információkat (tevékenységek, verzió, engedélyek) tartalmazza (bõvebben 4. fejezet). És hogy ne szaporítsuk a szót, lépjünk is az IGAZI programozásra a következõ fejezetekben!</string>
    
    <string name="title_activity_activities">LAIA</string>
    <string name="a_activity">A tevékenységek (activity-k) jelentik jövõbeli alkalmazásod forrását. Itt kezdõdik az alkalmazás létrejötte, itt tudsz igazán részletes beállításokat alkalmazni. De nézzük is, mire való!</string>
    <string name="b_activity">Üres Alkalmazás struktúrák</string>
    <string name="c_activity">A képen láthatjuk azt a csomagot, amit beállítottunk a projekt készítésekor. Ennek neve alapjáraton domain.apppackage.appname. Jelen helyzetben "org.sferadev.tryme" nevet használtuk. A domain-nek org-ot adtam meg, a fejlesztõi névnek sferadev-et, az alkalmazásnak pedig tryme-ot. Az új tevékenységükben a forrásmappában (src) található a .java kiterjesztésû fájl.</string>
    <string name="d_activity">Alapok a tevékenységben</string>
    <string name="e_activity">A projektemben létrehoztam egy TryActivity.java és egy activity_try.xml fájlt. Most pedig összehasonlítjuk az automutikusan létrehozott alkalmazáskódot.</string>
    <string name="f_activity">Hogy adjuk meg a komponenseket?</string>
    <string name="g_activity">Az Android a JAVA-ra épül, ennélfogva egy objektumokból álló nyelv. Ilyen objektumokat hozunk mi létre, és külön beállítjuk mindegyik feladatát. Ezt a tevékenységen belül vagy a felületen is megtehetjük. Mivel ez a fejezet a tevékenységekre fókuszál, így most az elõbbit fogjuk választani. Két módon tehetjük ezt meg, és webnézetben visszük véghez.</string>
    <string name="h_activity">1. lehetõség: Az Objektum csak a Class-en belül található meg! A fõ void után.</string>
    <string name="i_activity">Amint a képen látható, az Eclipse azt javasolja, hogy vigyük véghez az importálásokat.</string>
    <string name="j_activity">2. lehetõség: Az objektum minden Tevékenységben megtalálható! A fõ void után.</string>
    
    <string name="a_manifest">Minden Android alkalmazásnak szüksége van egy AndroidManifest.xml nevû fájlra, ami az app gyökérmappájában található. Ez automatikusan létrejön az Eclipse által, amikor új projektet hozunk létre. De mégis mire való? Miért ennyire fontos: Az AndroidManifest.xml írja körül az alkalmazásod részleteit, például a témát, a csomagot, a verziót, a nevet, és a minimális rendszerkövetelményeket... Illetve az Eclipse-ben található jegyzék (manifest) teszi lehetõvé, hogy néhány kattintással létrehozzuk a készülékeinken is futtatható .apk fájlt.</string>
    <string name="b_manifest">Hogyan dolgozzunk a jegyzékünkkel (Manifest) az Eclipse-ben?</string>
    <string name="c_manifest">A jegyzék felépítése az Eclipseben különbözõ füleken jelenik meg, mint például: jegyzék, alkalmazás, hozzáférési jogok, egészen az AndroidManifest.xml-ig. Most nézzük meg az AndroidManifest.xml részt.</string>
    <string name="d_manifest">Felépítés</string>
    <string name="e_manifest">Az alkalmazásjegyzék, amit az Eclipse szolgáltat, az egyszerû változtatások eszközölését szolgálja, de nagyban elõsegítheti alkalmazásod mûködését. Most megnézzük, hogyan jön létre ez a jegyzék, és mit is jelent.</string>
    <string name="f_manifest">A képen az xml fájl deklarációját (részleteit) láthatjuk, amihez nem fogunk nyúlni. Ezen kívül az alkalmazásjegyzék (manifest) is megtalálható, miután deklaráljuk az alkamazásjegyzék forráskódját, deklaráljuk a csomagot, amit használni fogunk, valamint a verziószámát/nevét. A csomag nevének meg kell egyeznie a mappa nevével, amiben a tevékenység található. Ezután láthatjuk az android:versionCode és android:version:Name parancsokat. Az elõbbi tudatja a felhasználókkal az általuk használt alkalmazás verziószámát, az utóbbi pedig a Play Áruházt értesíti a frissítésrõl.</string>
    <string name="g_manifest">A második képen deklaráljuk alkalmazásunk API vagy SDK verzióját. Esetünkben az alkalmazás API 17-re készült, de API 8, vagy afölötti verziót is támogatjuk.</string>
    <string name="h_manifest">A harmadik képen deklaráljuk alkalmazásunk erõforrásait mint ikon, alkalmazásnév, vagy annak témája. Ezeket az értékéket a res/drawable vagy a res/values mappából nyerjük. </string>
    <string name="i_manifest">Ezen a képen a tevékenység értékeit kezdjük deklarálni. A csomagon belül már megadtuk az csomag nevét, valamint azt az app nevet, amit az Android kijelez majd. Ezen felül ezekkel a szûrõkkel adjuk ki a parancsot az Androidnak, hogy jelezze-e ki appunkat az alkalmazáslistában, valamint milyen tevékenységek induljanak meg, ha a program elindul.</string>
    <string name="j_manifest">Végezetül bezárjuk az összes eddig megnyitott komponenst, amit .xml fájlként nyitottunk meg.</string>
    <string name="k_manifest">Ezekkel az alapokkal már érthetõ, miként és hogyan mûködik az alkalmazásjegyzék (manifest). De mi történik, ha alkalmazásunkkal olyan szolgáltatásokhoz szeretnénk hozzáférni, mint a GPS, vagy az internet? Ilyenkor használjuk az engedélyeket (permissions). A következõ frissítésben errõl is bõven szót fogunk ejteni.</string>
    
    <string name="a_layouts">Az UI (felhasználói felület) az Android egyik domináns része. Ha az alkalmazásod jól néz ki, az emberek nagyobb eséllyel töltik le, és ez sokszor hozzájárul a sikerhez. A Google-nak is mindig elsõdleges része volt az UI az Android sablonjaival, amilyen pl.: a holo.\n \nDe hogyan készíthetünk egy igazán jó felületet? \n \nAz Eclipse IDE és a Google lehetõséget ad, hogy lekódold az alkalmazásod, és késõbb a vizuális felületen is változtathass rajta. Hogy ezeket a beállításokat elérd, a res/Layout mappában található .xml kiterjesztésû fájlokhoz kell nyúlnod. Miután megnyitottad a felületet, a következõ kép fogad:</string>
    <string name="b_layouts">A bal oldali részen láthatjuk alkalmazásunk tartalmát, vannak gombok, szövegek képek... A tartalmakat akár be is húzhatod az alkalmazásba. Mellette láthatjuk az általunk eszközölt változtatásokat, és hogy azok hogyan néznek ki egy valós eszközön.\n \nA következõ képen nézzük a jobboldali részen, ahol az alkalmazásunk struktúrája épül fel hiearchikusan. Ez alatt láthatjuk a beállítások részt, ahol minden egyes elem opciója meg van jelenítve. Ezeket persze kódolással is létre tudjuk hozni.</string>
    <string name="c_layouts">További információkért ezekkel az elemekkel, valamint azoknak beállításaival kapcsolatban, látogasd meg a developers.android.com oldalt!</string>
    
    <string name="title_activity_manifest">LAIA</string>
    <string name="title_activity_layouts">LAIA</string>
    <string name="title_activity_values">LAIA</string>
    <string name="menu_settings">Beállítások</string>
    <string name="title_activity_menu">LAIA</string>
    <string name="title_activity_debug">LAIA</string>
    <string name="future">Jövõbeni frissítések</string>

</resources>
